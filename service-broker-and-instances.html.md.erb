---
title: The Service Broker and Instances
owner: Spring Cloud Services
---

<strong><%= modified_date %></strong>

See below for information about Spring Cloud&reg; Services' deployment model and other information which may be useful in operating its services or client applications.

<p class='note'><strong>Note</strong>: Ops Manager administrators can use Role-Based Access Control (RBAC) to manage which operators can make deployment changes, view credentials, and manage user roles in Ops Manager. Therefore, your role permissions might not allow you to perform every procedure in this operator guide. For more information about roles in Ops Manager, see <a href="https://docs.pivotal.io/pivotalcf/2-0/opsguide/config-rbac.html#about">Understand Roles in Ops Manager</a>.</p>

## <a id="service-orchestration"></a>Service Orchestration

Spring Cloud Services provides a series of [Managed Services](https://docs.cloudfoundry.org/services/) on [Pivotal Cloud Foundry](https://network.pivotal.io/products/pivotal-cf) (PCF). It uses Cloud Foundry's [Service Broker API](https://docs.cloudfoundry.org/services/api.html) to manage the three services---Config Server, Service Registry, and Circuit Breaker Dashboard---that it makes available. See below for information about Spring Cloud Services's broker implementation.

<%= image_tag("/spring-cloud-services/images/operator-information/ops1.png") %>

### <a id="the-service-broker"></a>The Service Broker

The service broker's functionality is divided between the following two Spring Boot applications, which are deployed in the "system" org to the "p-spring-cloud-services" space.

* spring-cloud-broker ("the SB"): Implements the Service Broker API.
* spring-cloud-broker-worker ("the Worker"): Acts on provision, deprovision, bind, and unbind requests.

The broker relies on two other Pivotal Cloud Foundry products, [MySQL for Pivotal Cloud Foundry](https://network.pivotal.io/products/p-mysql) and [RabbitMQ&reg; for Pivotal Cloud Foundry](https://network.pivotal.io/products/pivotal-rabbitmq-service), for the following service instances.

* **spring-cloud-broker-db**: A MySQL database used by the SB.
* **spring-cloud-broker-rmq**: A RabbitMQ queue used for communication between the SB and the Worker.

<p class='note'><strong>Note</strong>: As of version 1.9, RabbitMQ for PCF can be configured to provide a dedicated cluster for use by Spring Cloud Services. See the see the <a href="https://docs.pivotal.io/rabbitmq-cf/1-11/replicator.html#scs-isolation">Running SCS on a Dedicated RabbitMQ Cluster</a> section of the <a href="https://docs.pivotal.io/rabbitmq-cf/1-11/replicator.html">Creating Isolation with the RabbitMQ for PCF Replicator</a> topic in the <a href="https://docs.pivotal.io/rabbitmq-cf/1-11/">RabbitMQ for PCF documentation</a>.</p>

You can obtain the broker username and password from the Spring Cloud Services tile in Pivotal Cloud Foundry&reg; Operations Manager. Click the Spring Cloud Services tile, and in the **Credentials** tab, follow the link to the Broker Credentials.

<%= image_tag("/spring-cloud-services/images/operator-information/broker-credentials.png") %>

#### Broker Upgrades

The Spring Cloud Services product upgrade process checks before redeploying the service broker to see whether the broker applications' version has changed. If the version has not changed, the upgrade process will continue without redeploying either the SB or the Worker.

The SB application and the Worker application are deployed using a [blue-green deployment strategy](https://martinfowler.com/bliki/BlueGreenDeployment.html). During an upgrade of the service broker, the broker will continue processing requests to provision, deprovision, bind, and unbind service instances, without downtime.

#### <a id="access-broker-applications-in-apps-manager"></a>Access Broker Applications in Apps Manager

To view the broker applications in Pivotal Cloud Foundry&reg; Apps Manager, log into Apps Manager as an admin user and select the "system" org.

<%= image_tag("/spring-cloud-services/images/operator-information/broker-apps-apps-manager-org.png") %>

The applications are deployed in the "p-spring-cloud-services" space.

<%= image_tag("/spring-cloud-services/images/operator-information/broker-apps-apps-manager-space.png") %>

## <a id="service-instance-management"></a>Service Instance Management

A service instance is backed by one or more Spring Boot applications deployed by the Worker in the "p-spring-cloud-services" org to the "instances" space.

A service instance is assigned a GUID at provision time. Backing applications for services include the GUID in their names:

**Config Server**

* config-[GUID]: A [Spring Cloud Config](https://cloud.spring.io/spring-cloud-config/spring-cloud-config.html) server application.

**Service Registry**

* eureka-[GUID]: A [Spring Cloud Netflix](https://cloud.spring.io/spring-cloud-netflix/spring-cloud-netflix.html) Eureka server application.

**Circuit Breaker Dashboard**

* hystrix-[GUID]: A [Spring Cloud Netflix](https://cloud.spring.io/spring-cloud-netflix/spring-cloud-netflix.html) Hystrix server application.
* turbine-[GUID]: A [Spring Cloud Netflix](https://cloud.spring.io/spring-cloud-netflix/spring-cloud-netflix.html) Turbine application.
* **rabbitmq-[GUID]**: A [RabbitMQ for PCF](https://docs.pivotal.io/rabbitmq-cf/index.html) service instance.

### <a id="access-service-instance-backing-applications-in-apps-manager"></a>Access Service Instance Backing Applications in Apps Manager

To view a backing application for a service instance in Pivotal Cloud Foundry&reg; Apps Manager, get the service instance's GUID and look for the corresponding application in the "instances" space.

Target the org and space of the service instance.

<pre class="terminal">
$ cf target -o myorg -s development

API endpoint:   https://api.cf.wise.com (API version: 2.43.0)
User:           admin
Org:            myorg
Space:          development

$ cf services
Getting services in org myorg / space development as admin...
OK

name             service             plan       bound apps   last operation
config-server    p-config-server     standard   cook         update succeeded
</pre>

Run `cf service` with the `CF_TRACE` environment variable set to `true`. Copy the value of `resources.metadata.guid`, which is the service instance GUID.

<pre class="terminal">
$ CF_TRACE=true cf service config-server

REQUEST: [2016-06-27T20:45:24-05:00]
[...]

RESPONSE: [2016-06-27T20:45:25-05:00]
[...]

{
  "total_results": 1,
  "total_pages": 1,
  "prev_url": null,
  "next_url": null,
  "resources": [
    {
      "metadata": {
        "guid": "51711835-4626-4823-b5a1-e5d91012f3f2",
</pre>

Log into Apps Manager as an admin user and select the "p-spring-cloud-services" org. The applications are deployed in the "instances" space.

<%= image_tag("/spring-cloud-services/images/operator-information/instance-apps-apps-manager-org.png") %>

Look for the backing application named as described above, with the prefix specific to the service type and the service instance GUID.

<%= image_tag("/spring-cloud-services/images/operator-information/instance-apps-apps-manager-space.png") %>

<a id="get-service-instance-information"></a>
#### Get Service Instance Information

Each backing application for a service instance has the [Spring Boot Actuator](https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#production-ready) `info` endpoint enabled and accessible at `/info`. You can obtain version and other information about a service instance by accessing this endpoint.

Locate a backing application for a service instance as described in the [Access Service Instance Backing Applications in Apps Manager](#access-service-instance-backing-applications-in-apps-manager) section. In Apps Manager, on the page for the backing application, click the **Route** tab and copy the route for the application.

<%= image_tag("/spring-cloud-services/images/operator-information/backing-application-route.png") %>

Append `/info` to the route for the application. In the example above, the resulting URI would be:

```
https://config-021b3d73-3ffc-4cb8-a105-26f5aaa54dff.wise.com/info
```

Visit the URI in a browser or request it from another client (e.g. curl at a command line). The response is JSON, as in the following example for a Config Server service instance:

```json
{
  "version":"5",
  "git":{
    "commit":{
      "time":1478639430000,
      "id":"6e139ee"
    },
    "branch":"HEAD"
  }
}
```

The response may include additional fields depending on the service type, as in the following example for a Service Registry service instance:

```
{
  "issuer": "https://p-spring-cloud-services.uaa.wise.com/oauth/token",
  "version": "5",
  "nodeCount": "1",
  "git": {
    "commit": {
      "time": 1478639430000,
      "id": "6e139ee"
    },
    "branch": "HEAD"
  },
  "peers": []
}
```

In addition to the version of the service instance (`version`), this response includes the OAuth 2 token issuer URI for the service instance (`issuer`), the number of nodes provisioned for the service instance (`nodeCount`), the list of peer service instances, if any (`peers`), and information about the Spring Cloud Services Git repository at build time for the service instance (`git`).

<p class='note'><strong>Note</strong>: Fields such as those for Git repository information are for diagnostic purposes and intended to provide <a href="https://pivotal.io/support">Pivotal Support</a> with information to help in troubleshooting.</p>

## <a id="uaa-identity-zones-and-clients"></a>UAA Identity Zones and Clients

Spring Cloud Services uses the multi-tenancy capabilities of the Cloud Foundry User Account and Authentication server (UAA). It creates a new Identity Zone ("the Spring Cloud Services Identity Zone") for all authorization from Config Server and Service Registry service instances to client applications which have bindings to these service instances.

Within the platform Identity Zone ("the UAA Identity Zone"), Spring Cloud Services creates a `p-spring-cloud-services` UAA client for the SB and a `p-spring-cloud-services-worker` UAA client for the Worker. In the Spring Cloud Services Identity Zone, it creates a `p-spring-cloud-services-worker` UAA client for the Worker.

In the UAA Identity Zone, it also creates the following clients, where `[GUID]` is the service instance's GUID:

* A `eureka-[GUID]` UAA client per Service Registry service instance.
* A `hystrix-[GUID]` UAA client per Circuit Breaker Dashboard service instance.

In the Spring Cloud Services Identity Zone, it also creates the following clients, where `[GUID]` is the service instance's GUID:

* A `config-server-[GUID]` UAA client per Config Server service instance.
* A `eureka-[GUID]` UAA client per Service Registry service instance.

### <a id="get-access-token-for-direct-requests-to-a-service-instance"></a>Get Access Token for Direct Requests to a Service Instance

<%= partial 'common/get_access_token_for_direct_requests_to_a_service_instance' %>

### <a id="using-credhub-for-service-instance-credentials"></a>Using CredHub for Service Instance Credentials

If the Spring Cloud Services tile has been [configured to use the Pivotal Application Service (PAS) CredHub to secure service instance credentials](/spring-cloud-services/tile-configuration.html#secure-service-instance-credentials-with-credhub), an application's `VCAP_SERVICES` environment variable will not include credentials for bound service instances. The environment variable will instead contain a CredHub reference for the service instance's credentials, as in the following example:

```
{
 "VCAP_SERVICES": {
  "p-config-server": [
   {
    "credentials": {
     "credhub-ref": "/c/p-spring-cloud-services/p-config-server/019e0b47-b06a-4291-a8b8-4a2a90c645f5/credentials-json"
    },
    "label": "p-config-server",
    "name": "config-server",
    "plan": "standard",
    "provider": null,
    "syslog_drain_url": null,
    "tags": [
     "configuration",
     "spring-cloud"
    ],
    "volume_mounts": []
   }
  ]
 }
}
```

Service instance credentials secured using the PAS CredHub are securely provided to the bound application at runtime. For more information about CredHub, see the [documentation](https://docs.pivotal.io/pivotalcf/credhub/index.html).

## <a id="service-instances-dashboard"></a>The Service Instances Dashboard

To view the status of individual service instances, visit the Service Instances dashboard. You can access it at the following URL, where `SCS_BROKER_URL` is the URL of the SB (spring-cloud-broker):

```
SCS_BROKER_URL/admin/serviceInstances
```

Locate the SB as described in the [Access Broker Applications in Apps Manager](#access-broker-applications-in-apps-manager) section. The Service Instances dashboard is also linked to on the main page of the SB.

The dashboard shows the version and status of each service instance, as well as other information including the number of applications that are bound to the instance. It also provides an **Upgrade** button for each service instance and an **Upgrade Service Instances** button; these buttons may be enabled if any service instances shown in the dashboard are not at the version included with the currently-installed Spring Cloud Services product. For more information about upgrading service instances, see the [Service Instance Upgrades](/spring-cloud-services/service-instance-upgrades.html) topic.

<%= image_tag("/spring-cloud-services/images/operator-information/si-dashboard.png") %>

You can click the **Instance Name** of a listed service instance to view the instance's dashboard. Click the **+** icon beside the count of an instance's **Bound Apps** or **Service Keys** to view the names of the applications or service keys that are bound to that instance.

<p class='note'><strong>Note</strong>: The Service Instances dashboard is updated frequently (close to real-time). If using the cf CLI, you may notice a discrepancy between the status given for a service instance by the cf CLI (e.g., by the <code>cf service</code> command) versus that given by the Service Instances dashboard. The status retrieved by the cf CLI is not updated as frequently and may take time to match that shown on the Service Instances dashboard.</p>

## <a id="application-health-and-status"></a>Application Health and Status

For more visibility into how Spring Cloud Services service instances and the broker applications are behaving, or for troubleshooting purposes, you may wish to access those applications directly. See below for information about accessing their output.

### <a id="checking-broker-application-health"></a>Checking Broker Application Health

The service broker and worker applications use Cloud Foundry's HTTP health check. The Cloud Foundry Cloud Controller accesses a `/healthcheck` endpoint on the broker and worker applications. This endpoint is indicative of overall health of the service broker, including the service broker application, the worker application, and the MySQL database and RabbitMQ server used to store service instance information and facilitate communication between the applications.

If the broker topology is in a healthy state, the `/healthcheck` endpoint responds with HTTP status 200 and the following JSON output:

```
{
  "status": "UP"
}
```

If the broker applications are functional but the broker cannot verify the health of one or both of the dependent services, the endpoint may respond with the following JSON output:

```
{
  "status": "UNKNOWN"
}
```

If the broker topology is in a unhealthy state, the `/healthcheck` endpoint responds with HTTP status 503 and the following JSON output:

```
{
  "status": "DOWN"
}
```

The JSON response from the `/healthcheck` endpoint on the service broker Spring Boot application can be used with monitoring tools to ensure the broker's health. The Cloud Controller uses only the HTTP status code to determine the broker's health.

### <a id="broker-application-logs"></a>Read Broker Application Logs

To access logs for the SB and Worker applications, target the "system" org and its "p-spring-cloud-services" space:

<pre class="terminal">
$ cf target -o system -s p-spring-cloud-services

API endpoint:   https://api.cf.wise.com (API version: 2.43.0)
User:           admin
Org:            system
Space:          p-spring-cloud-services
Ben-Kleins-MacBook-Pro:Work bklein$ cf apps
Getting apps in org system / space p-spring-cloud-services as admin...
OK

name                         requested state   instances   memory   disk   urls
spring-cloud-broker          started           1/1         1G       1G     spring-cloud-broker.apps.wise.com
spring-cloud-broker-worker   started           1/1         1G       1G     spring-cloud-broker-worker.apps.wise.com
</pre>

Then you can use ```cf logs``` to tail logs for either the SB:

<pre class="terminal">
$ cf logs spring-cloud-broker
Connected, tailing logs for app spring-cloud-broker in org system / space p-spring-cloud-services as admin...
</pre>

or the Worker:

<pre class="terminal">
$ cf logs spring-cloud-broker-worker
Connected, tailing logs for app spring-cloud-broker-worker in org system / space p-spring-cloud-services as admin...
</pre>

### <a id="backing-application-logs"></a>Read Backing Application Logs

To access logs for service instance backing applications, target the "p-spring-cloud-services" org and its "instances" space:

<pre class="terminal">
$ cf target -o p-spring-cloud-services -s instances

API endpoint:   https://api.cf.wise.com (API version: 2.43.0)
User:           admin
Org:            p-spring-cloud-services
Space:          instances
$ cf apps
Getting apps in org p-spring-cloud-services / space instances as admin...
OK

name                                           requested state   instances   memory   disk   urls
config-86b38ce0-eed8-4c01-adb4-1a651a6178e2    started           1/1         1G       1G     config-86b38ce0-eed8-4c01-adb4-1a651a6178e2.apps.wise.com
eureka-493b6b17-512a-4961-8f85-6178251fe2fa    started           1/1         1G       1G     eureka-493b6b17-512a-4961-8f85-6178251fe2fa.apps.wise.com
hystrix-ff835bde-5b3a-4623-a57f-8d88028b6376   started           1/1         1G       1G     hystrix-ff835bde-5b3a-4623-a57f-8d88028b6376.apps.wise.com
turbine-ff835bde-5b3a-4623-a57f-8d88028b6376   started           1/1         1G       1G     turbine-ff835bde-5b3a-4623-a57f-8d88028b6376.apps.wise.com
</pre>

Then you can use ```cf logs``` to tail logs for a backing application.

<pre class="terminal">
$ cf logs config-86b38ce0-eed8-4c01-adb4-1a651a6178e2
Connected, tailing logs for app config-86b38ce0-eed8-4c01-adb4-1a651a6178e2 in org p-spring-cloud-services / space instances as admin...
</pre>

If the backing application is not running properly then detailed health information will be written to its log on each GET request sent to its `health` Actuator endpoint. No health details are logged if the backing application is healthy.

<pre class="terminal">
2017-05-04T13:37:17.43+0100 [APP/PROC/WEB/0]OUT 2017-05-04 12:37:17.431  INFO 14 --- [nio-8080-exec-7] i.p.s.c.h.ConfigServerHealthEndpoint     : Health status: DOWN. Health details: {git=DOWN {default=DOWN {repository={uri=https://github.com/spring-cloud-samples/cook-config}, error=https://github.com/spring-cloud-samples/cook-config: Authentication is required but no credentials have been configured}}, diskSpace=UP {total=1056858112, free=889167872, threshold=10485760}, refreshScope=UP {}}
2017-05-04T13:37:17.43+0100 [RTR/0]      OUT config-80593543-d141-424d-bcb9-1aa583be2356.olive.springapps.io - [2017-05-04T12:37:17.067+0000] "GET /health HTTP/1.1" 503 0 390 "-" "Java/1.8.0_121" "10.194.42.254:56706" "10.194.42.143:60820" x_forwarded_for:"10.194.42.143, 10.194.42.254" x_forwarded_proto:"https" vcap_request_id:"c04a99a8-c222-4e59-4acf-a9cfff62a3d5" response_time:0.369370172 app_id:"ee476250-6418-4e35-b3a4-9686947961d2" app_index:"0" x_b3_traceid:"2cfc3caf6fa0fa22" x_b3_spanid:"2cfc3caf6fa0fa22" x_b3_parentspanid:"-"
</pre>

### <a id="access-actuator-endpoints"></a>Access Actuator Endpoints

The SB and Worker applications, as well as backing applications for service instances, use [Spring Boot Actuator](https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready). Actuator adds a number of endpoints to these applications; some of the added endpoints are summarized below.

| ID                    | Function                                                                                                                                              |
|-----------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------|
| <code>env</code>      | Displays profiles, properties, and property sources from the application environment                                                                  |
| <code>health</code>   | Displays information about the health and status of the application                                                                                   |
| <code>metrics</code>  | Displays metrics information from the application                                                                                                     |
| <code>mappings</code> | Displays list of <code>@RequestMapping</code> paths in the application                                                                                |
| <code>shutdown</code> | Allows for graceful shutdown of the application. Disabled by default; not enabled in Spring Cloud Services broker or instance-backing applications    |

See the <a href="https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#production-ready-endpoints">Endpoints</a> section of the Actuator documentation for the full list of endpoints.

#### Invoking Actuator Endpoints

The SB application, the Worker application, the Service Registry's Eureka backing application, the Config Server's backing application, and the Circuit Breaker Dashboard's Hystrix backing application all use OAuth 2 authentication. To access Actuator endpoints on one of these applications, you must supply a valid OAuth 2 token in the request header.

1. Log in to Apps Manager as an admin user and navigate to the relevant application: for the SB or Worker, access the SB application or Worker application as described in the [The Service Broker](#the-service-broker) section; for a Service Registry, Config Server, or Circuit Breaker Dashboard service instance, access the backing application as described in the [Service Instance Management](#service-instance-management) section.

    <%= image_tag("/spring-cloud-services/images/operator-information/hystrix.png") %>

2. From the **Route** tab, copy the value of the application's route, as described in the [Get Service Instance Information](#get-service-instance-information) section.

3. In a terminal where you have already authenticated to PCF using `cf auth` or `cf login`, send the request to the Actuator endpoint (e.g., using cURL), appending the endpoint ID to the route URL; e.g., for the `health` endpoint, this would be something like `https://config-86b38ce0-eed8-4c01-adb4-1a651a6178e2.apps.wise.com/health`. The current OAuth 2 token can be obtained using the `cf oauth-token` command. In the example below, the response from `cf oauth-token` is used directly inside the header string.

    <pre class="terminal">
    $ curl -k https://config-86b38ce0-eed8-4c01-adb4-1a651a6178e2.apps.wise.com/health -H "Authorization: $(cf oauth-token)"
    {"status":"UP","git":{"status":"UP","default":{"status":"UP","repository":{"uri":"https://github.com/pivotal-cf/p-spring-cloud-services-acceptance"}},"app1":{"status":"UP","repository":{"uri":"https://github.com/pivotal-cf/p-spring-cloud-services-acceptance"}},"app2":{"status":"UP","repository":{"uri":"https://github.com/pivotal-cf/p-spring-cloud-services-acceptance"}}},"diskSpace":{"status":"UP","total":1056858112,"free":886517760,"threshold":10485760},"refreshScope":{"status":"UP"}}
    </pre>

    You also can send a request to each application's `health` Actuator endpoint without the authorization header. In that case, the response JSON object will contain only the summary status:

    <pre class="terminal">
    $ curl -k https://config-86b38ce0-eed8-4c01-adb4-1a651a6178e2.apps.wise.com/health
    {"status":"UP"}
    </pre>

    Sending an unauthenticated request to any of the other Actuator endpoints will return a response indicating insufficient authorization.

### <a id="invoke-config-server-endpoints"></a>Invoke Config Server Configuration Endpoints

To view the configuration properties that a Config Server service instance is returning for an application, you can access the configuration endpoints on the service instance's Spring Cloud Config Server backing application directly.

1. Obtain an access token for interacting with the service instance, as described in the [Get Access Token for Direct Requests to a Service Instance](#get-access-token-for-direct-requests-to-a-service-instance) section. In the first step of that section, copy the URL in `credentials.uri` from the service instance's entry in the `VCAP_SERVICES` environment variable.

2. Make a request of the Config Server service instance backing application in the format `http://SERVER/APPLICATION_NAME/PROFILE`, where `SERVER` is the URL from `credentials.uri` as mentioned in Step 1, `APPLICATION_NAME` is the application name as set in the `spring.application.name` property, and `PROFILE` is the name of a profile that has a configuration file in the repository.

    <br />
    An example request URL might look like this:

    ```
    https://config-86b38ce0-eed8-4c01-adb4-1a651a6178e2.apps.wise.com/cook/production
    ```

    Or, for the `default` profile:

    ```
    https://config-86b38ce0-eed8-4c01-adb4-1a651a6178e2.apps.wise.com/cook/default
    ```

    You can make the request using curl, providing the token---`TOKEN` in the below example---in a header with the `-H` or `--header` option:

    <pre class="terminal">
    $ curl -H 'Authorization: bearer TOKEN' https://config-86b38ce0-eed8-4c01-adb4-1a651a6178e2.apps.wise.com/cook/default
    {"name":"cook","profiles":["default"],"label":null,"version":"7b5da0d68d9237f2852f7ac6c5e7474fd433c3f3","propertySources":[{"name":"https://github.com/spring-cloud-services-samples/cook-config/cook.properties","source":{"cook.special":"Pickled Cactus"}}]}
    </pre>

For a list of path formats that the Config Server accepts, see the [Request Paths](/spring-cloud-services/config-server/background-information.html#request-paths) section of the [Background Information](/spring-cloud-services/config-server/background-information.html) topic in the [Config Server documentation](/spring-cloud-services/config-server/).
