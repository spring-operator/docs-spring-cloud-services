---
title: Writing Client Applications
owner: Spring Cloud Services
---

<strong><%= modified_date %></strong>

_Refer to the sample applications in the <a href="https://github.com/spring-cloud-services-samples/traveler/tree/1.5.x">&#8220;traveler&#8221; repository</a> to follow along with the code in this topic._

To use Spring Cloud Netflix Hystrix circuit breakers in a Spring Boot app with a Circuit Breaker Dashboard instance, you must add the dependencies listed below.

<%= partial '../general-dependencies' %>

Your app must also declare the Spring Cloud Services Circuit Breaker Dashboard starter as a dependency.

<%= partial '../circuit-breaker-dashboard-dependency' %>

## <a id="use-a-circuit-breaker"></a>Use a Circuit Breaker

To work with a Circuit Breaker Dashboard instance, your application must <a href="https://github.com/spring-cloud-services-samples/traveler/blob/1.5.x/agency/src/main/java/agency/AgencyApplication.java#L7-L15">include the ```@EnableCircuitBreaker``` annotation on a configuration class</a>.

```java
import org.springframework.cloud.client.circuitbreaker.EnableCircuitBreaker;
//...

@SpringBootApplication
@EnableDiscoveryClient
@RestController
@EnableCircuitBreaker
public class AgencyApplication {
    //...
```

To apply a circuit breaker to a method, <a href="https://github.com/spring-cloud-services-samples/traveler/blob/1.5.x/agency/src/main/java/agency/TravelAgent.java#L25-L28">annotate the method with ```@HystrixCommand```</a>, giving the annotation the name of a ```fallbackMethod```.

```java
    @HystrixCommand(fallbackMethod = "getBackupGuide")
    public String getGuide() {
        return restTemplate.getForObject("http://company/available", String.class);
    }
```

The `getGuide()` method uses a <a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/client/RestTemplate.html">`RestTemplate`</a> to obtain a guide name from another application called Company, which is registered with a Service Registry instance. (See the <a href="/spring-cloud-services/service-registry/index.html">Service Registry documentation</a>, specifically the <a href="/spring-cloud-services/service-registry/writing-client-applications.html">Writing Client Applications</a> topic.) The method thus relies on the Company application to return a response, and if the Company application fails to do so, calls to `getGuide()` will fail. When the failures exceed the threshold, the breaker on `getGuide()` will open the circuit.

While the circuit is open, the breaker redirects calls to the annotated method, and they instead call the designated `fallbackMethod`. The fallback method must be in the same class and have the same method signature (i.e., have the same return type and accept the same parameters) as the annotated method. In the Agency application, the `getGuide()` method on the `TravelAgent` class falls back to <a href="https://github.com/spring-cloud-services-samples/traveler/blob/1.5.x/agency/src/main/java/agency/TravelAgent.java#L30-L32">`getBackupGuide()`</a>.

```java
    String getBackupGuide() {
        return "None available! Your backup guide is: Cookie";
    }
```

If you wish, you may also annotate fallback methods themselves with ```@HystrixCommand``` to create a fallback chain.

### <a id="use-a-circuit-breaker-with-a-feign-client"></a>Use a Circuit Breaker with a Feign Client

You cannot apply `@HystrixCommand` directly to a [Feign](https://github.com/Netflix/feign)</a> client interface at this time. Instead, you can call Feign client methods from a service class that is autowired as a Spring bean (either through the <a href="https://docs.spring.io/autorepo/docs/spring-framework/current/javadoc-api/org/springframework/stereotype/Service.html"><code>@Service</code></a> or <a href="https://docs.spring.io/autorepo/docs/spring-framework/current/javadoc-api/org/springframework/stereotype/Component.html"><code>@Component</code></a> annotations or by being declared as a <code>@Bean</code> in a configuration class) and then annotate the service class methods with `@HystrixCommand`.

In the [Feign version of the Agency application](https://github.com/spring-cloud-services-samples/traveler/tree/1.5.x/feign-agency), the `AgencyApplication` class is [annotated with `@EnableFeignClients`](https://github.com/spring-cloud-services-samples/traveler/blob/1.5.x/feign-agency/src/main/java/agency/AgencyApplication.java#L10-L17).

```java
//...
import org.springframework.cloud.netflix.feign.EnableFeignClients;

@SpringBootApplication
@EnableDiscoveryClient
@RestController
@EnableCircuitBreaker
@EnableFeignClients
public class AgencyApplication {
    // ...
```

The application has a Feign client called [`CompanyClient`](https://github.com/spring-cloud-services-samples/traveler/blob/1.5.x/feign-agency/src/main/java/agency/CompanyClient.java).

```java
package agency;

import org.springframework.stereotype.Component;
import org.springframework.cloud.netflix.feign.FeignClient;
import org.springframework.web.bind.annotation.RequestMapping;

import static org.springframework.web.bind.annotation.RequestMethod.GET;

@FeignClient("https://company")
interface CompanyClient {
  @RequestMapping(value="/available", method = GET)
  String availableGuide();
}
```

The [`TravelAgent` class](https://github.com/spring-cloud-services-samples/traveler/blob/1.5.x/feign-agency/src/main/java/agency/TravelAgent.java) is annotated as a `@Service` class. The `CompanyClient` class is injected through autowiring, and the `getGuide()` method uses the `CompanyClient` to access the Company application. `@HystrixCommand` is applied to the service method:

```java
package agency;

import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Autowired;

import com.netflix.hystrix.contrib.javanica.annotation.HystrixCommand;

@Service
public class TravelAgent {

    @Autowired
    CompanyClient company;

    @HystrixCommand(fallbackMethod = "getBackupGuide")
    public String getGuide() {
        return company.availableGuide();
    }

    String getBackupGuide() {
        return "None available! Your backup guide is: Cookie";
    }

}
```

If the Company application becomes unavailable or if the Agency application cannot access it, calls to `getGuide()` will fail. When successive failures build up to the threshold, Hystrix will open the circuit, and subsequent calls will be redirected to the `getBackupGuide()` method until the Company application is accessible again and the circuit is closed.

