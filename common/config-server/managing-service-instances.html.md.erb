---
title: Managing Service Instances
owner: Spring Cloud Services
---

<strong><%= modified_date %></strong>

See below for information about managing Config Server service instances using the Cloud Foundry Command Line Interface tool (cf CLI). You can also manage Config Server service instances using <%= vars.scs_platform_name %> Apps Manager.

## <a id="creating"></a>Creating an Instance

Begin by targeting the correct org and space.

<%= partial vars.scs_cs_creating_instance_target %>

You can view plan details for the Config Server product using `cf marketplace -s`.

<%= partial vars.scs_cs_creating_instance_marketplace %>

Create the service instance using `cf create-service`, using the `-c` flag to provide a JSON object that specifies the configuration parameters. For information about the parameters used to configure a Git configuration source, see the [Configuring with Git](/spring-cloud-services/config-server/configuring-with-git.html) topic. For information about the parameters used to configure a HashiCorp Vault configuration source, see the [Configuring with Vault](/spring-cloud-services/config-server/configuring-with-vault.html) topic.

General parameters accepted for the Config Server are listed below.

| Parameter            | Function                                                                                   | Example                          |
|----------------------|--------------------------------------------------------------------------------------------|----------------------------------|
| <code>count</code>   | The number of nodes to provision: 1 by default, more for running in high-availability mode | <code>'{"count": 3}'</code>      |

To create an instance, specifying settings for Git configuration sources and that three nodes should be provisioned:

<%= partial vars.scs_cs_creating_instance_create %>

As the command output suggests, you can use the `cf services` or `cf service` commands to check the status of the service instance. When the service instance is ready, the `cf service` command will give a status of `create succeeded`:

<%= partial vars.scs_cs_creating_instance_service %>

<p class='note'><strong>Important</strong>: The <code>cf service</code> and <code>cf services</code> commands may report a <code>create succeeded</code> status even if the Config Server cannot initialize using the provided settings. For example, given an invalid URI for a configuration source, the service instance may still be created and have a <code>create succeeded</code> status. <br /> <br /> If the service instance does not appear to be functioning correctly, you can visit its dashboard to double-check that the provided settings are valid and accurate. See the <a href="/spring-cloud-services/config-server/using-the-dashboard.html">Using the Dashboard</a> topic.</p>

<%= vars.scs_creating_instance_discrepancy %>

## <a id="updating"></a>Updating an Instance

You can update settings on a Config Server service instance using the Cloud Foundry Command Line Interface tool (cf CLI). The `cf update-service` command can be given a `-c` flag with a JSON object containing parameters used to configure the service instance.

To update a Config Server service instance's settings, target the org and space of the service instance:

<pre class="terminal">
$ cf target -o myorg -s development

API endpoint:   https://api.cf.wise.com (API version: 2.43.0)
User:           user
Org:            myorg
Space:          development
</pre>

Then run `cf update-service SERVICE_NAME -c '{ "PARAMETER": "VALUE" }'`, where `SERVICE_NAME` is the name of the service instance, `PARAMETER` is a supported parameter, and `VALUE` is the value for the parameter. For information about the parameters used to configure a Git configuration source, see the [Configuring with Git](/spring-cloud-services/config-server/configuring-with-git.html) topic. For information about the parameters used to configure a HashiCorp Vault configuration source, see the [Configuring with Vault](/spring-cloud-services/config-server/configuring-with-vault.html) topic.

General parameters accepted for the Config Server are listed below.

| Parameter            | Function                                                                                                                                               | Example                          |
|----------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------------------|
| <code>count</code>   | The number of nodes to provision: 1 by default, more for running in high-availability mode                                                             | <code>'{"count": 3}'</code>      |
| <code>upgrade</code> | Whether to upgrade the instance                                                                                                                        | <code>'{"upgrade": true}'</code> |
| <code>force</code>   | When `upgrade` is set to `true`, whether to force an upgrade of the instance, even if the instance is already at the latest available service version  | <code>'{"force": true}'</code>   |

To update a service instance, setting Git configuration sources, run:

<pre class="terminal">
$ cf update-service config-server -c '{"git": { "uri": "https://github.com/spring-cloud-samples/config-repo", "repos": { "cook": { "pattern": "cook*", "uri": "https://github.com/spring-cloud-services-samples/cook-config" } } } }'
Updating service instance config-server as admin...
OK

Update in progress. Use 'cf services' or 'cf service config-server' to check operation status.
</pre>

To update a service instance and set the count of instances for running in high-availability mode, run:

<pre class="terminal">
$ cf update-service config-server -c '{"count": 3}'
Updating service instance config-server as admin...
OK

Update in progress. Use 'cf services' or 'cf service config-server' to check operation status.
</pre>

As the command output suggests, you can use the `cf services` or `cf service` commands to check the status of the service instance. When the update is complete, the `cf service` command will give a status of `update succeeded`:

<pre class="terminal">
$ cf service config-server

Service instance: config-server
Service: p-config-server
Bound apps:
Tags:
Plan: standard
Description: Config Server for Spring Cloud Applications
Documentation url: https://docs.pivotal.io/spring-cloud-services/
Dashboard: https://spring-cloud-broker.apps.wise.com/dashboard/p-config-server/e2615a44-66f5-4fda-9ddc-079af1db9ae4

Last Operation
Status: update succeeded
Message:
Started: 2016-06-24T21:11:53Z
Updated: 2016-06-24T21:13:59Z
</pre>

<p class='note'><strong>Important</strong>: The <code>cf service</code> and <code>cf services</code> commands may report an <code>update succeeded</code> status even if the Config Server cannot initialize using the provided settings. For example, given an invalid URI for a configuration source, the service instance may still be restarted and have an <code>update succeeded</code> status. <br /> <br /> If the service instance does not appear to be functioning correctly after an update, you can visit its dashboard to double-check that the provided settings are valid and accurate. See the <a href="/spring-cloud-services/config-server/using-the-dashboard.html">Using the Dashboard</a> topic.</p>

The service instance is now updated and ready to be used. For information about using an application to access configuration values served by a Config Server service instance, see the <a href="/spring-cloud-services/config-server/writing-client-applications.html">Writing Client Applications</a> topic.
