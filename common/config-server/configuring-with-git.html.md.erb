---
title: Configuring with Git
owner: Spring Cloud Services
---

<strong><%= modified_date %></strong>

## <a id="overview"></a>Overview

[Git](https://git-scm.com) is a distributed version control system (DVCS). It encourages parallel development through simplified branching and merging, optimizes performance by conducting many operations on the local copy of the repository, and uses SHA-1 hashes for checksums to assure integrity and guard against corruption of repository data. For more information about Git, see the [documentation](https://git-scm.com/doc).

Spring Cloud Config provides a Git backend so that the Spring Cloud Config Server can serve configuration stored in Git. The Spring Cloud Services Config Server supports this backend and can serve configuration stored in Git to client apps when given the URL to a Git repository (for example, the URL of a repository hosted on GitHub or Bitbucket). For more information about Spring Cloud Config's Git backend, see the [documentation](https://cloud.spring.io/spring-cloud-config/single/spring-cloud-config.html#_git_backend).

See below for information about configuring a Config Server service instance to use Git for configuration sources.

## <a id="general-configuration"></a>General Configuration

Parameters used to configure configuration sources are part of a JSON object called `git`, as in `{"git": { "uri": "https://example.com/config" } }`. For more information on the purposes of these fields, see the [The Config Server](./background-information.html#the-config-server) section of [Background Information](./background-information.html).

General parameters used to configure the Config Server's default configuration source are listed below.

| Parameter                      | Function                                                                                                                                                |
|--------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------|
| <code>uri</code>               | The URI (<code>http://</code>, <code>https://</code>, or <code>ssh://</code>) of a repository that can be used as the default configuration source      |
| <code>label</code>             | The default "label" that can be used with the default repository if a request is received without a label (for example if the <code>spring.cloud.config.label</code> property is not set in a client app)         |
| <code>searchPaths</code>       | A pattern used to search for configuration-containing subdirectories in the default repository                                                          |
| <code>cloneOnStart</code>      | Whether the Config Server should clone the default repository when it starts up (by default, the Config Server will only clone the repository when configuration is first requested from the repository). Valid values are `true` and `false` |
| <code>username</code>          | The username used to access the default repository (if protected by HTTP Basic authentication)                                                          |
| <code>password</code>          | The password used to access the default repository (if protected by HTTP Basic authentication)                                                          |
| <code>skipSslValidation</code> | For a `https://` URI, whether to skip validation of the SSL certificate on the default repository's server. Valid values are `true` and `false`         |

<p class='note'><strong>Important</strong>: If you set <code>cloneOnStart</code> to <code>true</code> for a service instance that uses a repository which is secured with HTTP Basic authentication, you must set the <code>username</code> and <code>password</code> at the same time as you set <code>cloneOnStart</code>. Otherwise, the Config Server will be unable to access the repository and the service instance may fail to initialize.</p>

The `uri` setting is required; you cannot define a Config Server configuration source without including a `uri`.

The default value of the `label` setting is `master`. You can set `label` to a branch name, a tag name, or a specific Git commit hash.

To set `label` to point to the `develop` branch of a repository, you might configure settings as in the following:

```
cf create-service p-config-server standard config-server -c '{"git": { "uri": "https://github.com/myorg/config-repo", "label": "develop" } }'
```

To set `label` to point to the `v1.1` tag in a repository, you might configure settings as shown in the following command:

```
cf create-service p-config-server standard config-server -c '{"git": { "uri": "https://github.com/myorg/config-repo", "label": "v1.1" } }'
```

Within a client app, you can override the Config Server's `label` setting by setting the `spring.cloud.config.label` property (for example, in `bootstrap.yml`).

```yml
spring:
  cloud:
    config:
      label: v1.2
```

Passwords are masked in the Config Server dashboard.

## <a id="encryption-and-encrypted-values"></a>Encryption and Encrypted Values

The Config Server can serve encrypted property values from a configuration file. If the Config Server is configured with a symmetric or asymmetric encryption key and the encrypted values are prefixed with the string `{cipher}`, the Config Server will decrypt the values before serving them to client apps. The Config Server has an `/encrypt` endpoint, which can be used to encrypt property values.

<% if vars.product_name == 'PCF' %>
To use these features in a client app, you must use a Java buildpack which contains the Java Cryptography Extension (JCE) Unlimited Strength policy files. These files are contained in the Cloud Foundry Java buildpack from version 3.7.1.

<p class="tip">If you cannot use version 3.7.1 or later, you can add the JCE Unlimited Strength policy files to an earlier version of the Cloud Foundry Java buildpack. Fork the <a href="https://github.com/cloudfoundry/java-buildpack">buildpack on GitHub</a>, then download the policy files from Oracle and place them in the buildpack's <code>resources/open_jdk_jre/lib/security</code> directory. Follow the instructions in <a href="https://docs.pivotal.io/pivotalcf/adminguide/buildpacks.html">Managing Custom Buildpacks</a> to add this buildpack to Pivotal Cloud Foundry. Be sure that it has the lowest position of all enabled Java buildpacks.</p>
<% end %>

When the Config Server has been configured to encrypt values, you can make a POST request to the <code>/encrypt</code> endpoint. Include the property value in the request. A request to encrypt a value might look something like the following (using cURL), where the `cf oauth-token` command is used to provide an OAuth 2.0 token and <code>SERVER</code> is the URL of the Config Server:

```
curl -H 'Authorization: $(cf oauth-token)' http://SERVER/encrypt -d 'Value to be encrypted'
```

The Config Server returns the encrypted value. You can use the encrypted value in a configuration file as described in the [Encrypted Configuration](./configuration-properties.html#encrypted-configuration) section of [Configuration Properties](./configuration-properties.html).

The parameters used to configure server-side encryption for a Config Server are listed below.

| Parameter                      | Function                                                                                                                                                |
|--------------------------------|--------------------------------|
| <code>encrypt.key</code>       | The key to use for encryption. |

To configure a Config Server service instance that can encrypt property values, use the following command:

```
cf create-service p-config-server standard config-server -c '{"git": {"uri": "https://github.com/spring-cloud-services-samples/cook-config.git" }, "encrypt": { "key": "KEY" }}'
```

If you wish to use public-key (or asymmetric) encryption, you may configure the Config Server to use a PEM-encoded keypair. You might generate such a keypair using, for example, [OpenSSL](https://www.openssl.org/) on the command line:

```
$ openssl genpkey -algorithm RSA -outform PEM -pkeyopt rsa_keygen_bits:2048 > server.key
# Translate PEM encoded private key to a RSA private key and remove newlines from it
$ openssl rsa -in server.key | tr -d '\n' > server_rsa.key
```

To configure a Config Server service instance that can encrypt property values with an assymetric keypair, use the following JSON object, where the value of `key` is the content of the `server_rsa.key` file:

```
'{"git": {"uri": "https://github.com/spring-cloud-services-samples/cook-config.git" }, "encrypt": { "key": "-----BEGIN RSA PRIVATE KEY-----MIIE......-----END RSA PRIVATE KEY-----" }}'
```

The encryption key is masked in the Config Server dashboard.

## <a id="ssh-repository-access"></a>SSH Repository Access

You can configure a Config Server configuration source so that the Config Server accesses it using the Secure Shell (SSH) protocol. To do so, you must specify a URI using the `ssh://` URI scheme or the Secure Copy Protocol (SCP) style URI format, and you must supply a private key. You may also supply a host key with which the server will be identified. If you do not provide a host key, the Config Server will not verify the host key of the configuration source's server.

A SSH URI must include a username, host, and repository path. This might be specified as shown in the following command:

```
cf create-service p-config-server standard config-server -c '{"git": { "uri": "ssh://git@github.com/spring-cloud-services-samples/cook.git"} }'
```

An equivalent SCP-style URI might be specified as shown in the following command:

```
cf create-service p-config-server standard config-server -c '{"git": { "uri": "git@github.com:spring-cloud-services-samples/cook-config.git"} }'
```

The parameters used to configure SSH for a Config Server configuration source's URI are listed below.

| Parameter                      | Function                                                                                                                                                |
|--------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------|
| <code>hostKey</code>           | The host key of the Git server. If you have connected to the server via git on the command line, this is in your <code>.ssh/known_hosts</code>. Do not include the algorithm prefix; this is specified in <code>hostKeyAlgorithm</code>. (Optional.)                                                                                        |
| <code>hostKeyAlgorithm</code>  | The algorithm of <code>hostKey</code>: one of "ssh-dss", "ssh-rsa", "ecdsa-sha2-nistp256", "ecdsa-sha2-nistp384", and "ecdsa-sha2-nistp521". (Required if supplying <code>hostKey</code>.)            |
| <code>privateKey</code>        | The private key that identifies the Git user, with all newline characters replaced by <code>\n</code>. Passphrase-encrypted private keys are not supported.                     |
| <code>strictHostKeyChecking</code> | Whether the Config Server should fail to start if it encounters an error when using the provided <code>hostKey</code>. (Optional.) Valid values are `true` and `false`. Default is `true`.      |

To configure a Config Server service instance that uses SSH to access a configuration source, allowing for host key verification, use the following command:

```
cf create-service p-config-server standard config-server -c '{"git": { "uri": "ssh://git@github.com/spring-cloud-services-samples/cook.git", "hostKey": "EXAMPLEcccc1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+...", "hostKeyAlgorithm": "ssh-rsa", "privateKey": "-----BEGIN EXAMPLE RSA PRIVATE KEY-----\nMIIJKQIB..."} }'
```

To configure a Config Server service instance that uses SSH to access a configuration source, without host key verification, use the following command:

```
cf create-service p-config-server standard config-server -c '{"git": { "uri": "ssh://git@github.com/spring-cloud-services-samples/cook.git", "privateKey": "-----BEGIN EXAMPLE RSA PRIVATE KEY-----\nMIIJKQIB..."} }'
```

Host and private keys are masked in the Config Server dashboard.

## <a id="multiple-repositories"></a>Multiple Repositories

You can configure a Config Server service instance to use multiple configuration sources, which will be used only for specific apps or for apps which are using specific profiles. To do so, you must provide parameters in repository objects within the `git.repos` JSON object. Most parameters set in the `git` object for the default configuration source are also available for specific configuration sources and can be set in repository objects within the `git.repos` object.

Each repository object in the `git.repos` object has a name. In the repository specified in the following command, the name is "cookie":

```
cf create-service p-config-server standard config-server -c '{ "git": { "repos": { "cookie": { "uri": "https://github.com/spring-cloud-services-samples/cook-config" } } } }'
```

Each repository object also has a `pattern`, which is a comma-separated list of app and profile names separated with forward slashes (`/`, as in `app/profile`) and potentially including wildcards (`*`, as in `app*/profile*`). If you do not supply a pattern, the repository object's name will be used as the pattern. In the repository specified in the following command, the pattern is `co*/dev*` (matching any app whose name begins with `co` and which is using a profile whose name begins with `dev`), and the default pattern would be `cookie`:

```
cf create-service p-config-server standard config-server -c '{"git": { "repos": { "cookie": { "pattern": "co*/dev*", "uri": "https://github.com/spring-cloud-services-samples/cook-config" } } } }'
```

For more information about the pattern format, see ["Pattern Matching and Multiple Repositories"](https://cloud.spring.io/spring-cloud-config/single/spring-cloud-config.html#_pattern_matching_and_multiple_repositories) in the [Spring Cloud Config documentation](https://cloud.spring.io/spring-cloud-config/single/spring-cloud-config.html).

The parameters used to configure specific configuration sources for the Config Server are listed below.

| Parameter                                   | Function                                                                                                                                        |
|---------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------|
| <code>repos."name"</code>                   | A repository object, containing repository fields                                                                                               |
| <code>repos."name".pattern</code>           | A pattern for the names of apps that store configuration from this repository (if not supplied, will be <code>"name"</code>)            |
| <code>repos."name".uri</code>               | The URI (<code>http://</code>, <code>https://</code>, or <code>ssh://</code>) of this repository                                                |
| <code>repos."name".label</code>             | The default "label" to use with this repository if a request is received without a label (for example if the <code>spring.cloud.config.label</code> property is not set in a client app)                                                        |
| <code>repos."name".searchPaths</code>       | A pattern used to search for configuration-containing subdirectories in this repository                                                         |
| <code>repos."name".cloneOnStart</code>      | Whether the Config Server should clone this repository when it starts up (by default, the Config Server will only clone the repository when configuration is first requested from the repository). Valid values are `true` and `false`     |
| <code>repos."name".username</code>          | The username used to access this repository (if protected by HTTP Basic authentication)                                                         |
| <code>repos."name".password</code>          | The password used to access this repository (if protected by HTTP Basic authentication)                                                         |
| <code>repos."name".skipSslValidation</code> | For a `https://` URI, whether to skip validation of the SSL certificate on the default repository's server. Valid values are `true` and `false` |
| <code>repos."name".hostKey</code>           | The host key used by the Config Server to access this repository (if accessing via SSH). See the [SSH Repository Access](#ssh-repository-access) section for more information                               |
| <code>repos."name".hostKeyAlgorithm</code>  | The algorithm of <code>hostKey</code>: one of "ssh-dss", "ssh-rsa", "ecdsa-sha2-nistp256", "ecdsa-sha2-nistp384", and "ecdsa-sha2-nistp521"     |
| <code>repos."name".privateKey</code>        | The private key corresponding to <code>hostKey</code>, with all newline characters replaced by <code>\n</code>                                  |

<p class='note'><strong>Important</strong>: If you set <code>cloneOnStart</code> to <code>true</code> for a repository which is secured with HTTP Basic authentication, you must set the <code>username</code> and <code>password</code> at the same time as you set <code>cloneOnStart</code>. Otherwise, the Config Server will be unable to access the repository and the service instance may fail to initialize.</p>

The `uri` setting is required; you cannot define a Config Server configuration source without including a `uri`.

The default value of the `label` setting is `master`. You can set `label` to a branch name, a tag name, or a specific Git commit hash.

To set `label` to point to the `develop` branch of a repository, you might configure the setting as shown in the following command:

```
cf create-service p-config-server standard config-server -c '{"git": { "repos": { "cookie": { "uri": "https://github.com/myorg/config-repo", "label": "develop" } } } }'
```

To set `label` to point to the `v1.1` tag in a repository, you might configure the setting as shown in the following command:

```
cf create-service p-config-server standard config-server -c '{"git": { "repos": { "cookie": { "uri": "https://github.com/myorg/config-repo", "label": "v1.1" } } } }'
```

Within a client app, you can override this `label` setting's value by setting the `spring.cloud.config.label` property (for example, in `bootstrap.yml`).

```yml
spring:
  cloud:
    config:
      label: v1.2
```

Passwords are masked in the Config Server dashboard.

To configure a Config Server service instance with a default repository and a repository specific to an app named "cook", use the following command:

```
cf create-service p-config-server standard config-server -c '{"git": { "uri": "https://github.com/spring-cloud-services-samples/fortune-teller", "searchPaths": "configuration", "repos": { "cookie": { "pattern": "cook", "uri": "https://github.com/spring-cloud-services-samples/cook-config" } } } }'
```

To configure a Config Server service instance with a default repository and a repository specific to apps using the `dev` profile, use the following command:

```
cf create-service p-config-server standard config-server -c '{"git": { "uri": "https://github.com/spring-cloud-services-samples/fortune-teller", "searchPaths": "configuration", "repos": { "cookie": { "pattern": "*/dev", "uri": "https://github.com/spring-cloud-services-samples/cook-config" } } } }'
```

## <a id="placeholders-in-repository-uris"></a>Placeholders in Repository URIs

The URIs for configuration source Git repositories can include a couple of special strings as placeholders:

* `{application}`: the name set in the `spring.application.name` property on an app
* `{profile}`: a profile listed in the `spring.profiles.active` property on an app

You can use these placeholders to (for example) set a single URI which maps one repository each to multiple apps that use the same Config Server, or to set a single URI which maps one repository each to multiple profiles.

<p class='note'><strong>Note</strong>: URI placeholders cannot be used with a repository that has the <code>cloneOnStart</code> setting set to <code>true</code>. See the listing for <code>cloneOnStart</code> in the table of <a href="#general-configuration">general configuration parameters.</a></p>

A repository URI that enables use of one repository per app might be expressed as shown in the following command. For an app named "cook", this would locate the repository named `cook-config`:

```
cf create-service p-config-server standard config-server -c '{"git": { "uri": "https://github.com/spring-cloud-services-samples/{application}-config"  } }'
```

A repository URI that enables use of one repository per profile might be expressed as shown in the following command. For an app using the `dev` profile, this would locate a repository named `config-dev`:

```
cf create-service p-config-server standard config-server -c '{"git": { "uri": "https://github.com/spring-cloud-services-samples/config-{profile}"  } }'
```

For more information about using placeholders, see ["Placeholders in Git URI"](https://cloud.spring.io/spring-cloud-config/single/spring-cloud-config.html#_placeholders_in_git_uri) in the [Spring Cloud Config documentation](https://cloud.spring.io/spring-cloud-config/single/spring-cloud-config.html).

To configure a Config Server service instance with a repository URI that enables one repository per app, use the following command:

```
cf create-service p-config-server standard config-server -c '{"git": { "uri": "https://github.com/spring-cloud-services-samples/{application}-config"  } }'
```

To configure a Config Server service instance with a repository URI that enables one repository per profile, use the following command:

```
cf create-service p-config-server standard config-server -c '{"git": { "uri": "https://github.com/spring-cloud-services-samples/config-{profile}"  } }'
```

## <a id="proxy-repository-access"></a>HTTP(S) Proxy Repository Access

You can configure a Config Server service instance to access configuration sources using an HTTP or HTTPS proxy. To do so, you must provide proxy settings in either of the `git.proxy.http` or `git.proxy.https` JSON objects. You can set the proxy host and port, the proxy username and password (if applicable), and a list of hosts which the Config Server should access outside of the proxy.

<p class='note'><strong>Note</strong>: Proxy settings must be set once in each <code>git</code> object, where applicable. If you are using a <a href="./composite-backends.html">composite backend</a> with multiple configuration sources that use the same proxy, you must provide that proxy's settings for each configuration source object.</p>

Settings for an HTTP proxy are set in the `git.proxy.http` object. These might be set as shown in the following command:

```
cf create-service p-config-server standard config-server -c '{"git": { "proxy": { "http": { "host": "proxy.wise.com", "port": "80" } } } }'
```

Settings for an HTTPS proxy are set in the `git.proxy.https` object. These might be set as shown in the following command:

```
cf create-service p-config-server standard config-server -c '{"git": { "proxy": { "https": { "host": "secure.wise.com", "port": "443" } } } }'
```

<p class='note'><strong>Note</strong>: Some networks require that separate proxy servers are used for HTTP and HTTPS URLs. In such a case, you can set both the <code>proxy.http</code> and <code>proxy.https</code> objects.</p>

The parameters used to configure HTTP or HTTPS proxy settings for the Config Server are listed below.

| Parameter                                  | Function                                                                                                                                            |
|--------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|
| <code>proxy.http</code>                    | A proxy object, containing HTTP proxy fields                                                                                                        |
| <code>proxy.http.host</code>               | The HTTP proxy host                                                                                                                                 |
| <code>proxy.http.port</code>               | The HTTP proxy port                                                                                                                                 |
| <code>proxy.http.nonProxyHosts</code>      | The hosts to access outside the HTTP proxy                                                                                                          |
| <code>proxy.http.username</code>           | The username to use with an authenticated HTTP proxy                                                                                                |
| <code>proxy.http.password</code>           | The password to use with an authenticated HTTP proxy                                                                                                |
| <code>proxy.https</code>                   | A proxy object, containing HTTPS proxy fields                                                                                                       |
| <code>proxy.https.host</code>              | The HTTPS proxy host                                                                                                                                |
| <code>proxy.https.port</code>              | The HTTPS proxy port                                                                                                                                |
| <code>proxy.https.nonProxyHosts</code>     | The hosts to access outside the HTTPS proxy (if <code>proxy.http.nonProxyHosts</code> is also provided, <code>http.nonProxyHosts</code> will be used instead of <code>https.nonProxyHosts</code>)      |
| <code>proxy.https.username</code>          | The username to use with an authenticated HTTPS proxy (if <code>proxy.http.username</code> is also provided, <code>http.username</code> will be used instead of <code>https.username</code>) |
| <code>proxy.https.password</code>          | The password to use with an authenticated HTTPS proxy (if <code>proxy.http.password</code> is also provided, <code>http.password</code> will be used instead of <code>https.password</code>) |

To configure a Config Server service instance that uses an HTTP proxy to access configuration sources, use the following command:

```
cf create-service p-config-server standard config-server -c '{"git": {"uri": "https://github.com/spring-cloud-services-samples/cook-config", "proxy": { "http": { "host": "proxy.wise.com", "port": "80" } } } }'
```

To configure a Config Server service instance that uses an authenticated HTTPS proxy to access configuration sources, specifying that `example.com` should be accessed outside of the proxy, use the following command:

```
cf create-service p-config-server standard config-server -c '{"git": {"uri": "https://github.com/spring-cloud-services-samples/cook-config", "proxy": { "https": { "host": "secure.wise.com", "port": "443", "username": "jim", "password": "wright62", "nonProxyHosts": "example.com" } } } }'
```
